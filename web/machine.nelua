##[[
pragma{
  nogc=true,
  nochecks=true
}

-- cartesi machine
cflags '-I./cartesi-machine-v0.15.2_wasm/include'
ldflags '-L./cartesi-machine-v0.15.2_wasm/lib'

-- basic flags
cflags '-sINITIAL_MEMORY=1073741824 -sNO_DISABLE_EXCEPTION_CATCHING=1'
cflags '-sENVIRONMENT=worker -sMODULARIZE=1 -sEXPORT_NAME=createModule'
cflags '-sNO_EXIT_RUNTIME=1 -sFORCE_FILESYSTEM=1 -sASSERTIONS -sALLOW_MEMORY_GROWTH'
--cflags '-O3 -g0'

-- export functions
local export_functions = {
  '_hello',
  '_load',
}
cflags('-sEXPORTED_FUNCTIONS='..table.concat(export_functions,','))
local export_runtime_functions = {
  'ccall',
  'cwrap',
}
cflags('-sEXPORTED_RUNTIME_METHODS='..table.concat(export_runtime_functions,','))

-- embed files
cflags '--embed-file ./images'

]]

require 'io'
require 'cartesi-machine'

local function hello(): void <cexport'hello'>
  print("Hello")
end

local function load(): void <cexport'load'>
  -- rootfs flash drive
  local flash_drive_entries: [1]cm_memory_range_config = {{
    start = 0x90000000000000,
    length = (@uint64)(-1),
    -- image_filename = "images/rootfs-v0.18.0.ext2",
    image_filename = "images/image.ext2",
  }}

  -- set config
  local config = CartesiMachine.get_default_config()
  config.ram = {
    image_filename = 'images/linux-5.15.63-ctsi-2-v0.17.0.bin',
    length = 512*1024*1024 --512MB
  }
  config.rom = {
    image_filename = 'images/rom-v0.17.0.bin',
    bootargs = "\z
      console=hvc0 \z
      rootfstype=ext2 \z
      root=/dev/mtdblock0 \z
      rw quiet \z
      swiotlb=noforce \z
      mtdparts=flash.0:-(root) \z
      init=/opt/cartesi/bin/init \z
      single=yes -- node --version"
  }
  config.htif = {
    yield_automatic = true,
    console_getchar = true,
  }
  config.flash_drive = {
    count = 1,
    entry = &flash_drive_entries,
  }

  local machine = CartesiMachine.create(config)
  machine:run()
  io.stdout:printf("Halted\n")
  io.stdout:printf('Cycles %d\n', machine:read_mcycle())
end
